package net.intrenetchat;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Date;
import javax.swing.JOptionPane;


/**
 * Class to save user information
 * @author Philip White
 */
public class Saving {
    private volatile static Saving uniqueInstance;
    private FilesReader files;
    private FileWriter writer;
    private int x = 200;
    private int y = 200;
    private String name = "[New User]";
    private int port = 5454;
    private int enc = 0;
    private int prichathist = 0;
    private int chathist = 0;
    private String font = "Dialog";
    private int fontSize = 12;
    private String back = "WHITE";
    private String front = "BLACK";
    private Date date ;
    private String lookAndFeel = "Metal";
    private int audioUser = 1;
    private int audioMess = 1;
    private String variableLoc = "INC.sets";
    private Saving(){
	files = new FilesReader();
        date = new Date();
        }
    
    /**
     * Constructor for Saving
     * @return Unique instance of the Saving class
     */
    public static Saving getInstance(){
        if(uniqueInstance == null){
            synchronized(Saving.class){
                uniqueInstance = new Saving();
            }
        }
        return uniqueInstance;
    }
    
    public void saveLocation(){
        try{
            writer = new FileWriter("INC.loc");
            writer.write("Do Not Edit this file or the program may stop working or overwrite it \n");
            writer.write(variableLoc+"\n");
            writer.close();
        }catch(IOException e){
            
        }
    }
    
    public boolean loadLocation(){
        boolean test = false;
        String path = files.loadLines("INC.loc");
        String[] array = path.split("\n");
        if(array.length > 1){
            test = true;
            variableLoc = array[1];
        }
        return test;
    }

    /**
     *Saves the variables in a file
     */
    public void saveVariables(){
        try{
            writer = new FileWriter(variableLoc);
            writer.write("Please do not edit any of the settings in this file or the program may not work \n");
            writer.write("Username :"+name +"\n");
            writer.write("Port Number :"+port+"\n");
            writer.write("X Coordinate :"+x+"\n");
            writer.write("Y Coordinate :"+y+"\n");
            writer.write("Encryption :"+enc+"\n");
            writer.write("Chat History :"+chathist+"\n");
            writer.write("Private Chat History :"+prichathist+"\n");
            writer.write("Font :"+font+"\n");
            writer.write("Font Size :"+fontSize+"\n");
            writer.write("Background Colour :"+back+"\n");
            writer.write("Font Colour :"+front+"\n");
            writer.write("Look and Feel :"+lookAndFeel+"\n");
            writer.write("Audio users :"+audioUser+"\n");
            writer.write("Audio messages :"+audioMess+"\n");
            writer.close();
        }catch(Exception e){JOptionPane.showMessageDialog(null, "Error S01 please see administator for details");}
    }
    
    private String breakString(String val){
        String[] array = val.split(":",2);
        System.out.println(val);
        return array[1];
    }
   
    /**
     *Loads the variable file
     * @return Whether of not the variable were successfully loaded
     */
    public boolean loadVariables(){
        boolean test;
        String path = files.loadLines(variableLoc);
        String[] array = path.split("\n");
        if(array.length < 2){
            test = false;
        }else{
            
            name = breakString(array[1]);
            port = convert(breakString(array[2]));
            x = convert(breakString(array[3]));
            y = convert(breakString(array[4]));
            enc = convert(breakString(array[5]));
            chathist = convert(breakString(array[6]));
            prichathist = convert(breakString(array[7]));
            font = breakString(array[8]);
            fontSize = convert(breakString(array[9]));
            back = breakString(array[10]);
            front = breakString(array[11]);
            lookAndFeel = breakString(array[12]);
            audioUser = convert(breakString(array[13]));
            audioMess = convert(breakString(array[14]));
            test = true;
        }
        return test;
    }

    /**
     * Returns the X value
     * @return X
     */
    public int getX() {
        return x;
    }

    /**
     * Returns the Y value
     * @return Y
     */
    public int getY() {
        return y;
    }

    /**
     * Returns username
     * @return name
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the X value
     * @param x X Coordinate
     */
    public void setX(int x) {
        this.x = x;
    }

    /**
     * Sets the Y value
     * @param y Y Coordinate
     */
    public void setY(int y) {
        this.y = y;
    }

    /**
     * Sets the username 
     * @param name Username
     */
    public void setName(String name) {
        this.name = name;
    }
        
    /**
     * Sets the port number
     * @param port Port number
     */
    public void setPort(int port){
        this.port = port;
    }
        
    /**
     * Gets the port number
     * @return The port number being used
     */
    public int getPort(){
        return port;
    }
 
    /**
     * Gets the int for Encrypted Chat
     * @return Encrypted chat boolean
     */
    public int getEnc(){
        return enc;
    }
    
    /**
     * Gets the chat history int
     * @return Chat History boolean
     */
    public int getChatHist(){
        return chathist;
    }
    
    /**
     * Sets whether Encrypted chat should be on or off
     * @param encs EncryptedChat int
     */
    public void setEnc(int encs){
        this.enc = encs;
    }
    
    /**
     * Sets whether Chat history should be turned on or off
     * @param c Chat History
     */
    public void setChatHist(int c){
        this.chathist = c;
    }
    
    public void setPriChatHist(int c){
        this.prichathist = c;
    }
    
    public int getPriChatHist(){
        return prichathist;
    }
    
    /**
     * Returns the font type that the user was using
     * @return The name of the font choosen
     */
    public String getFont() {
        return font;
    }
    
    /**
     * Sets the font that the user has been using
     * @param fonts The font name
     */
    public void setFont(String fonts){
        font = fonts;
    }
    
    /**
     * Returns the size of the font that was being used
     * @return Font size in an int
     */
    public int getFontSize(){
        return fontSize;
    }
    
    /**
     * Sets the font size being used
     * @param f Font size
     */
    public void setFontSize(int f){
        fontSize = f;
    }
    
    /**
     * Returns the colour choosen for the background
     * @return Name of the colour last used
     */
    public String getBack(){
        return back;
    }
    
    /**
     * Sets the background colour last used
     * @param b Name of the colour last used
     */
    public void setBack(String b){
        back = b;
    }
    
    /**
     * Returns the name of the colour used on the font last
     * @return Name of the colour used
     */
    public String getFront(){
        return front;
    }
    
    /**
     * Sets the name of the colour used on the font last
     * @param f Name of the colour last used
     */
    public void setFront(String f){
        front = f;
    }
    
    /**
     * Returns the name of the look and feel option
     * @return String containing the option
     */
    public String getLookAndFeel(){
        return lookAndFeel;
    }
    
    /**
     * Sets the look and feel option
     * @param LAF LAF option
     */
    public void setLookAndFeel(String LAF){
        lookAndFeel = LAF;
    }
    
    public int getAudioUser(){
        return this.audioUser;
    }
    
    public void setAudioUser(int i){
        audioUser = i;
    }
        
    public int getAudioMess(){
        return audioMess;
    }
    
    public void setAudioMess(int i){
        audioMess = i;
    }
    
    public void setVariableLoc(String v){
        variableLoc = v;
    }
    
    public String getVariableLoc(){
        return variableLoc;
    }
    
    private int convert(String in){
        String ret = "";
        for(int i=0;i < in.length();i++){
            int c = (int)in.charAt(i);
            if((c > 47)&&(c < 58)){
                ret += in.charAt(i);
            }
        }
        return Integer.parseInt(ret);
    }
    
    
        
    /**
     * Method that saves the main chat history to file
     * @param chat All the messages in one session
     */
    public void saveChat(String chat){
        if(chat.compareTo("")!=0){
            String fileName;
            int i = 0;
            if(!fileChecker("IntraNetChatHistory")){
                new File("IntraNetChatHistory").mkdirs();
            }
            try{
                do{
                    i++;
                    fileName = "IntraNetChatHistory/"+date.toString()+"_"+i+".txt";
                }while(fileChecker(fileName));
                writer = new FileWriter(fileName);
                writer.write(chat);
                writer.close();
            }catch(Exception e){

            }
        }
    }
    
    private boolean fileChecker(String fileName){
        File file = new File(fileName);
        return file.exists();
    }
    
    public void savePrivate(String name, String conv){
        if(conv.compareTo("")!=0){
            String fileName;
            int i = 0;
            if(!fileChecker("IntraNetChatHistory")){
                new File("IntraNetChatHistory").mkdirs();
            }
            try{
                do{
                    i++;
                    fileName = "IntraNetChatHistory/"+name+"_"+date.toString()+"_"+i+".txt";
                }while(fileChecker(fileName));
                writer = new FileWriter(fileName);
                writer.write(conv);
                writer.close();
            }catch(Exception e){}
        }
    }
}
